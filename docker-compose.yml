# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: '3.7'

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_URL: mongodb://db:27017/institute
  APIKEY-CHAIN: ${APIKEY-CHAIN}
  APIKEY-LICENSE: ${APIKEY-LICENSE}
  
services:
  app:
    image: mongo-vapor:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    ports:
      - '8080:8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
    restart: always
    networks:
      - main-institute
  migrate:
    image: mongo-vapor:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
    networks:
      - main-institute
  revert:
    image: mongo-vapor:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
    networks:
      - main-institute
  db:
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - mongodb:/data/db
    restart: unless-stopped
    networks:
      - main-institute
  react-app:
    image: react-app
    build:
      context: ./client
    stdin_open: true
    ports:
      - "3000:3000"
    networks:
      - main-institute
  api-server:
    image: api-server
    build:
      context: ./server
    ports:
      - "5000:5000"
    networks:
      - main-institute
    environment:
      <<: *shared_environment
    depends_on:
      - mongo
  mongo:
    image: mongo
    ports:
      - 27020:27020
    command: mongod --port 27020
    volumes:
      - mongowebdb:/data/db
    restart: unless-stopped
    networks:
      - main-institute
networks:
  main-institute:
    driver: bridge
volumes:
  mongodb: {}
  mongowebdb: {}
